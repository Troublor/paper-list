
@inproceedings{jiang_contractfuzzer_2018,
	address = {Montpellier France},
	title = {{ContractFuzzer}: fuzzing smart contracts for vulnerability detection},
	isbn = {978-1-4503-5937-5},
	shorttitle = {{ContractFuzzer}},
	url = {https://dl.acm.org/doi/10.1145/3238147.3238177},
	doi = {10.1145/3238147.3238177},
	abstract = {Decentralized cryptocurrencies feature the use of blockchain to transfer values among peers on networks without central agency. Smart contracts are programs running on top of the blockchain consensus protocol to enable people make agreements while minimizing trusts. Millions of smart contracts have been deployed in various decentralized applications. The security vulnerabilities within those smart contracts pose significant threats to their applications. Indeed, many critical security vulnerabilities within smart contracts on Ethereum platform have caused huge financial losses to their users. In this work, we present ContractFuzzer, a novel fuzzer to test Ethereum smart contracts for security vulnerabilities. ContractFuzzer generates fuzzing inputs based on the ABI specifications of smart contracts, defines test oracles to detect security vulnerabilities, instruments the EVM to log smart contracts runtime behaviors, and analyzes these logs to report security vulnerabilities. Our fuzzing of 6991 smart contracts has flagged more than 459 vulnerabilities with high precision. In particular, our fuzzing tool successfully detects the vulnerability of the DAO contract that leads to \$60 million loss and the vulnerabilities of Parity Wallet that have led to the loss of \$30 million and the freezing of \$150 million worth of Ether.},
	language = {en},
	urldate = {2021-01-14},
	booktitle = {Proceedings of the 33rd {ACM}/{IEEE} {International} {Conference} on {Automated} {Software} {Engineering}},
	publisher = {ACM},
	author = {Jiang, Bo and Liu, Ye and Chan, W. K.},
	month = sep,
	year = {2018},
	keywords = {Smart Contract, Fuzzing, Vulnerability},
	pages = {259--269},
	file = {Jiang et al. - 2018 - ContractFuzzer fuzzing smart contracts for vulner.pdf:/Users/troublor/Zotero/storage/BSKTR3RX/Jiang et al. - 2018 - ContractFuzzer fuzzing smart contracts for vulner.pdf:application/pdf},
}


@inproceedings{frank_ethbmc_2020,
	title = {{ETHBMC}: {A} {Bounded} {Model} {Checker} for {Smart} {Contracts}},
	isbn = {978-1-939133-17-5},
	shorttitle = {\{{ETHBMC}\}},
	url = {https://www.usenix.org/conference/usenixsecurity20/presentation/frank},
	language = {en},
	urldate = {2021-05-06},
	author = {Frank, Joel and Aschermann, Cornelius and Holz, Thorsten},
	year = {2020},
	keywords = {Smart Contract, Symbolic Execution, Vulnerability, Model Check},
	pages = {2757--2774},
	file = {Full Text PDF:/Users/troublor/Zotero/storage/UI7DSREF/Frank et al. - 2020 - ETHBMC A Bounded Model Checker for Smart Contra.pdf:application/pdf;Snapshot:/Users/troublor/Zotero/storage/QXFYTUXD/frank.html:text/html},
}


@article{grech_madmax_2018,
	title = {{MadMax}: surviving out-of-gas conditions in {Ethereum} smart contracts},
	volume = {2},
	issn = {2475-1421, 2475-1421},
	shorttitle = {{MadMax}},
	url = {https://dl.acm.org/doi/10.1145/3276486},
	doi = {10.1145/3276486},
	language = {en},
	number = {OOPSLA},
	urldate = {2021-01-14},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},
	month = oct,
	year = {2018},
	keywords = {Smart Contract, Vulnerability, Abstract Interpretation},
	pages = {1--27},
	file = {Grech et al. - 2018 - MadMax surviving out-of-gas conditions in Ethereu.pdf:/Users/troublor/Zotero/storage/SW63CCAP/Grech et al. - 2018 - MadMax surviving out-of-gas conditions in Ethereu.pdf:application/pdf},
}
